[{"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\App.js":"1","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\index.js":"2","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Details\\styles.js":"3","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Details\\Details.jsx":"4","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\styles.js":"5","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Main.jsx":"6","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Form\\styles.js":"7","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Form\\Form.jsx":"8","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\List\\styles.js":"9","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\List\\List.jsx":"10","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\styles.js":"11","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\context\\context.js":"12","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\context\\contextReducer.js":"13","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\constants\\categories.js":"14","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\utils\\formatDate.js":"15","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\useTransactions.js":"16","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Snackbar\\Snackbar.jsx":"17","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\InfoCard.jsx":"18","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Snackbar\\styles.js":"19"},{"size":2242,"mtime":1608749943772,"results":"20","hashOfConfig":"21"},{"size":469,"mtime":1608726079394,"results":"22","hashOfConfig":"21"},{"size":275,"mtime":1608659070696,"results":"23","hashOfConfig":"21"},{"size":835,"mtime":1608723858159,"results":"24","hashOfConfig":"21"},{"size":674,"mtime":1608660827748,"results":"25","hashOfConfig":"21"},{"size":1526,"mtime":1608750725420,"results":"26","hashOfConfig":"21"},{"size":269,"mtime":1608662048266,"results":"27","hashOfConfig":"21"},{"size":7000,"mtime":1608749405670,"results":"28","hashOfConfig":"21"},{"size":447,"mtime":1608663067361,"results":"29","hashOfConfig":"21"},{"size":2261,"mtime":1608718023436,"results":"30","hashOfConfig":"21"},{"size":572,"mtime":1608661343647,"results":"31","hashOfConfig":"21"},{"size":1231,"mtime":1608735808069,"results":"32","hashOfConfig":"21"},{"size":814,"mtime":1608735278645,"results":"33","hashOfConfig":"21"},{"size":1838,"mtime":1608717018137,"results":"34","hashOfConfig":"21"},{"size":368,"mtime":1608718217468,"results":"35","hashOfConfig":"21"},{"size":1303,"mtime":1608723743219,"results":"36","hashOfConfig":"21"},{"size":1138,"mtime":1608749414731,"results":"37","hashOfConfig":"21"},{"size":500,"mtime":1608748094094,"results":"38","hashOfConfig":"21"},{"size":224,"mtime":1608746435762,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1t9xl5c",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\App.js",["82"],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\index.js",[],["83","84"],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Details\\styles.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\styles.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Form\\styles.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\Form\\Form.jsx",["85"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { useSpeechContext } from '@speechly/react-client'\r\nimport CustomizedSnackbar from '../../Snackbar/Snackbar'\r\n\r\nimport {\r\n    TextField,\r\n    Typography,\r\n    Grid,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    incomeCategories,\r\n    expenseCategories,\r\n} from '../../../constants/categories'\r\n\r\nimport formatDate from '../../../utils/formatDate'\r\nimport useStyles from './styles'\r\n\r\nimport { ExpenseTrackerContext } from '../../../context/context'\r\n\r\nconst initialState = {\r\n    amount: '',\r\n    category: '',\r\n    type: 'Income',\r\n    date: formatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n    const { segment } = useSpeechContext()\r\n    const classes = useStyles()\r\n    const [formData, setFormData] = useState(initialState)\r\n    const { amount, category, type, date } = formData\r\n    const { addTransaction } = useContext(ExpenseTrackerContext)\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const createTransaction = () => {\r\n        if (Number.isNaN(Number(amount)) || !date.includes('-')) return\r\n\r\n        const transaction = {\r\n            ...formData,\r\n            amount: Number(amount),\r\n            id: uuidv4(),\r\n        }\r\n        setOpen(true)\r\n        addTransaction(transaction)\r\n        setFormData(initialState)\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n            if (segment) {\r\n                if (segment.intent.intent === 'add_expense') {\r\n                    setFormData({ ...formData, type: 'Expense' })\r\n                } else if (segment.intent.intent === 'add_income') {\r\n                    setFormData({ ...formData, type: 'Income' })\r\n                } else if (\r\n                    segment.isFinal &&\r\n                    segment.intent.intent === 'create_transaction'\r\n                ) {\r\n                    return createTransaction()\r\n                } else if (\r\n                    segment.isFinal &&\r\n                    segment.intent.intent === 'cancel_transaction'\r\n                ) {\r\n                    return setFormData(initialState)\r\n                }\r\n\r\n                segment.entities.forEach(e => {\r\n                    const category = `${e.value.charAt(0)}${e.value\r\n                        .slice(1)\r\n                        .toLowerCase()}`\r\n\r\n                    switch (e.type) {\r\n                        case 'amount':\r\n                            setFormData({ ...formData, amount: e.value })\r\n                            break\r\n                        case 'category':\r\n                            if (\r\n                                incomeCategories\r\n                                    .map(ic => ic.type)\r\n                                    .includes(category)\r\n                            ) {\r\n                                setFormData({\r\n                                    ...formData,\r\n                                    type: 'Income',\r\n                                    category,\r\n                                })\r\n                            } else if (\r\n                                expenseCategories\r\n                                    .map(ec => ec.type)\r\n                                    .includes(category)\r\n                            ) {\r\n                                setFormData({\r\n                                    ...formData,\r\n                                    type: 'Expense',\r\n                                    category,\r\n                                })\r\n                            }\r\n                            break\r\n                        case 'date':\r\n                            setFormData({ ...formData, date: e.value })\r\n                            break\r\n                        default:\r\n                            break\r\n                    }\r\n                })\r\n                if (segment.isFinal && amount && category && type && date) {\r\n                    createTransaction()\r\n                }\r\n            }\r\n        },\r\n        [segment]\r\n    )\r\n\r\n    const selectedCategories =\r\n        type === 'Income' ? incomeCategories : expenseCategories\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <CustomizedSnackbar open={open} setOpen={setOpen} />\r\n            <Grid item xs={12}>\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                    {segment && segment.words.map(w => w.value).join(' ')}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select\r\n                        value={type}\r\n                        onChange={e =>\r\n                            setFormData({ ...formData, type: e.target.value })}\r\n                    >\r\n                        <MenuItem value=\"Income\"> Income</MenuItem>\r\n                        <MenuItem value=\"Expense\"> Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select\r\n                        value={category}\r\n                        onChange={e =>\r\n                            setFormData({\r\n                                ...formData,\r\n                                category: e.target.value,\r\n                            })}\r\n                    >\r\n                        {selectedCategories.map(category =>\r\n                            <MenuItem key={category.type} value={category.type}>\r\n                                {category.type}\r\n                            </MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField\r\n                    type=\"number\"\r\n                    label=\"Amount\"\r\n                    fullWidth\r\n                    value={amount}\r\n                    onChange={e =>\r\n                        setFormData({ ...formData, amount: e.target.value })}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField\r\n                    type=\"date\"\r\n                    label=\"Date\"\r\n                    fullWidth\r\n                    value={date}\r\n                    onChange={e =>\r\n                        setFormData({\r\n                            ...formData,\r\n                            date: formatDate(e.target.value),\r\n                        })}\r\n                />\r\n            </Grid>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                onClick={createTransaction}\r\n            >\r\n                Create\r\n            </Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\List\\styles.js",[],["86","87"],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\List\\List.jsx",["88"],"import React, { useContext } from 'react'\r\nimport { ExpenseTrackerContext } from '../../../context/context'\r\n\r\nimport {\r\n    List as MUIList,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Avatar,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    Slide,\r\n} from '@material-ui/core'\r\n\r\nimport { Delete, MoneyOff, Payment } from '@material-ui/icons'\r\nimport useStyles from './styles'\r\n\r\nconst List = () => {\r\n    const classes = useStyles()\r\n    const { deleteTransaction, transactions } = useContext(\r\n        ExpenseTrackerContext\r\n    )\r\n\r\n    return (\r\n        <MUIList dense={false} className={classes.list}>\r\n            {transactions.map(transaction =>\r\n                <Slide\r\n                    direction=\"down\"\r\n                    in\r\n                    mountOnEnter\r\n                    unmountOnExit\r\n                    key={transaction.id}\r\n                >\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={\r\n                                    transaction.type === 'Income'\r\n                                        ? classes.avatarIncome\r\n                                        : classes.avatarExpense\r\n                                }\r\n                            >\r\n                                <Payment />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n\r\n                        <ListItemText\r\n                            primary={transaction.category}\r\n                            secondary={`₹${transaction.amount} - ${transaction.date}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"delete\"\r\n                                onClick={() =>\r\n                                    deleteTransaction(transaction.id)}\r\n                            >\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                </Slide>\r\n            )}\r\n        </MUIList>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Main\\styles.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\context\\context.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\context\\contextReducer.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\constants\\categories.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\utils\\formatDate.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\useTransactions.js",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\InfoCard.jsx",[],"C:\\Users\\Adeesh\\Desktop\\expense-tracker\\src\\components\\Snackbar\\styles.js",[],{"ruleId":"89","severity":1,"message":"90","line":2,"column":16,"nodeType":"91","messageId":"92","endLine":2,"endColumn":26},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":118,"column":9,"nodeType":"99","endLine":118,"endColumn":18,"suggestions":"100"},{"ruleId":"93","replacedBy":"101"},{"ruleId":"95","replacedBy":"102"},{"ruleId":"89","severity":1,"message":"103","line":15,"column":18,"nodeType":"91","messageId":"92","endLine":15,"endColumn":26},"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'amount', 'category', 'createTransaction', 'date', 'formData', and 'type'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["106"],["104"],["105"],"'MoneyOff' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [amount, category, createTransaction, date, formData, segment, type]",{"range":"109","text":"110"},[4062,4071],"[amount, category, createTransaction, date, formData, segment, type]"]